import json
import os
import re

# --- Configuration ---
INPUT_JSON_FILENAME = 'combat_achievements_data.json' # The file generated by the previous script
OUTPUT_JSON_FILENAME = 'combat_achievements_data_by_boss.json' # New output file

# Mapping from points to tier names (ensure this matches your previous script/logic)
TIER_POINTS = {
    1: "easy",
    2: "medium",
    3: "hard",
    4: "elite",
    5: "master",
    6: "grandmaster",
}

# --- Helper Function ---
def normalize_boss_key(boss_name):
    """Converts a boss name to a consistent key (lowercase, underscore spaces)."""
    if not boss_name or boss_name.strip().upper() == 'N/A':
        return "n_a" # Special key for general tasks
    # Remove potentially problematic characters, replace space with underscore
    s = re.sub(r'[^\w\s-]', '', boss_name.lower().strip())
    return re.sub(r'[-\s]+', '_', s)

# --- Main Script ---
def main():
    # Check if input file exists
    if not os.path.exists(INPUT_JSON_FILENAME):
        print(f"Error: Input JSON file not found at '{os.path.abspath(INPUT_JSON_FILENAME)}'")
        return

    print(f"Reading tier-based data from '{INPUT_JSON_FILENAME}'...")
    try:
        with open(INPUT_JSON_FILENAME, mode='r', encoding='utf-8') as infile:
            tier_based_data = json.load(infile)
    except json.JSONDecodeError as e:
        print(f"Error decoding JSON from input file: {e}")
        return
    except Exception as e:
        print(f"An unexpected error occurred reading the input file: {e}")
        return

    # --- Reformat the data ---
    boss_based_data = {}
    tasks_reformatted = 0
    tasks_missing_boss = 0

    print("Reformatting data by boss...")
    for tier_name, tier_info in tier_based_data.items():
        if "tasks" not in tier_info or not isinstance(tier_info["tasks"], list):
            print(f"Warning: Skipping tier '{tier_name}', missing or invalid 'tasks' list.")
            continue

        for task in tier_info["tasks"]:
            if "boss" not in task or not task["boss"]:
                boss_key = "n_a" # Assign to general if boss field missing/empty
                task["boss"] = "N/A" # Ensure boss field exists
                tasks_missing_boss += 1
            else:
                boss_key = normalize_boss_key(task["boss"])

            # Add tier property based on points if it doesn't exist
            if "tier" not in task and "points" in task and task["points"] in TIER_POINTS:
                 task["tier"] = TIER_POINTS[task["points"]]
            elif "tier" not in task:
                 task["tier"] = "unknown" # Assign default if points missing/invalid
                 print(f"Warning: Could not determine tier for task '{task.get('name', 'UNKNOWN')}'")


            # Create boss entry if it doesn't exist
            if boss_key not in boss_based_data:
                boss_based_data[boss_key] = {
                    # Use original boss name for display if available, else use key
                    "name": task["boss"] if task["boss"] != "N/A" else "General/Multiple",
                    "tasks": []
                }
            elif task["boss"] != "N/A" and boss_based_data[boss_key]["name"] == "General/Multiple":
                 # Update name if we find a non-N/A boss name later for this key
                 boss_based_data[boss_key]["name"] = task["boss"]


            # Add the task to the correct boss list
            boss_based_data[boss_key]["tasks"].append(task)
            tasks_reformatted += 1

    print(f"Reformatted {tasks_reformatted} tasks.")
    if tasks_missing_boss > 0:
        print(f"Assigned {tasks_missing_boss} tasks to 'General/Multiple' due to missing boss field.")

    # Sort tasks within each boss group by points (desc), then name (asc)
    print("Sorting tasks within each boss group...")
    for boss_key in boss_based_data:
        boss_based_data[boss_key]["tasks"].sort(key=lambda x: (-x.get("points", 0), x.get("name", "")))

    # Write the new JSON output
    print(f"Writing boss-based data to '{OUTPUT_JSON_FILENAME}'...")
    try:
        with open(OUTPUT_JSON_FILENAME, mode='w', encoding='utf-8') as outfile:
            json.dump(boss_based_data, outfile, indent=4)
        print("Boss-based JSON file created successfully!")
    except Exception as e:
        print(f"An error occurred while writing the new JSON file: {e}")

if __name__ == "__main__":
    main()